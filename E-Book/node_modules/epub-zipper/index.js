'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _child_process = require('child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
var EPUBCHECK_VERSION = '4.0.2';

var Epub = function () {
  (0, _createClass3.default)(Epub, [{
    key: 'report',
    value: function report(err, stdout, stderr, reject) {
      return this.constructor.reporter(err, stdout, stderr, reject);
    }
  }, {
    key: 'iff',
    value: function iff(test, callback) {
      return this.constructor.conditional(test, callback);
    }
  }], [{
    key: 'reporter',
    value: function reporter(err, stdout, stderr, reject) {
      if (err) {
        reject(err);
      }
      if (stderr !== '') {
        reject(new Error(stderr));
      }
      if (stdout !== '') {
        console.log(stdout);
      }
    }
  }, {
    key: 'conditional',
    value: function conditional(test, callback) {
      var _this = this;

      return new _promise2.default(function () {
        var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(resolve /* , reject */) {
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!test) {
                    _context.next = 6;
                    break;
                  }

                  _context.next = 3;
                  return callback().then(resolve);

                case 3:
                  _context.t0 = _context.sent;
                  _context.next = 7;
                  break;

                case 6:
                  _context.t0 = resolve();

                case 7:
                  return _context.abrupt('return', _context.t0);

                case 8:
                case 'end':
                  return _context.stop();
              }
            }
          }, _callee, _this);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }]);

  function Epub() {
    (0, _classCallCheck3.default)(this, Epub);

    this.options = {
      input: null,
      output: null,
      modified: null,
      bookName: null,
      fileName: null,
      bookPath: null,
      clean: true,
      title: null,
      flags: ['-e']
    };
  }

  (0, _createClass3.default)(Epub, [{
    key: '_set',
    value: function _set(key, val) {
      this.options[key] = val;
      return this[key];
    }
  }, {
    key: '_get',
    value: function _get(key) {
      return this.options[key];
    }
  }, {
    key: 'remove',
    value: function remove() {
      return ['epubs=`ls -1 ' + this._get('output') + '/*.epub 2>/dev/null | wc -l`;', 'if [ $epubs != 0 ]; then rm ' + this._get('output') + '/*.epub; fi'].join(' ');
    }
  }, {
    key: 'compile',
    value: function compile() {
      return ['zip -X0 ' + this._get('bookPath') + ' ./mimetype', 'zip -X9Dr ' + this._get('bookPath') + ' ./META-INF -x *.DS_Store', 'zip -X9Dr ' + this._get('bookPath') + ' ./OPS -x *.DS_Store'].join(' && ');
    }
  }, {
    key: 'validate',
    value: function validate() {
      return ['java -jar ' + _path2.default.resolve(__dirname, 'vendor/epubcheck.jar'), this._get('flags').join(' '), this._get('bookName')].join(' ');
    }
  }, {
    key: 'run',
    value: function run(cmd, dir) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {
        (0, _child_process.exec)(_this2[cmd](), { cwd: dir }, function (err, stdout, stderr) {
          _this2.report(err, stdout, stderr, reject);
          resolve();
        });
      });
    }
  }, {
    key: 'create',
    value: function create(_ref2) {
      var _this3 = this;

      var args = (0, _objectWithoutProperties3.default)(_ref2, []);

      (0, _assign2.default)(this.options, args);
      var required = ['input', 'output'];
      required.forEach(function (_) {
        if (!_this3.options[_] || !{}.hasOwnProperty.call(_this3.options, _)) {
          throw new Error('Missing required argument: `' + _ + '`');
        }
      });

      var now = new Date().toISOString().replace(/:/g, '-');
      this._set('modified', now);

      var fileName = this._get('fileName');
      var bookName = fileName ? fileName + '.epub' : this._get('modified') + '.epub';
      this._set('fileName', fileName);
      this._set('bookName', bookName);

      var bookPath = '"' + _path2.default.resolve(this._get('output'), this._get('bookName')) + '"';
      this._set('bookPath', bookPath);

      return new _promise2.default(function (resolve /* , reject */) {
        return _this3.iff(_this3._get('clean'), function () {
          return _this3.run('remove', _this3._get('output'));
        }).then(function () {
          return _this3.run('compile', _this3._get('input'));
        }).then(function () {
          console.log('Validating against EpubCheck ' + EPUBCHECK_VERSION);
          return _this3.run('validate', _this3._get('output'));
        }).catch(function (err) {
          return console.error(err.message);
        }).then(resolve);
      });
    }
  }]);
  return Epub;
}();

var epub = new Epub();
exports.default = epub;
